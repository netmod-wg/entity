# -*- org -*-

This document defines a YANG data model for the management of multiple
physical entities managed by a single server.

* Introduction
** Terminology

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14, ^RFC2119^.

*** Tree Diagrams

A simplified graphical representation of the data model is used in
this document.  The meaning of the symbols in these
diagrams is as follows:

- Brackets "[" and "]" enclose list keys.
- Abbreviations before data node names: "rw" means configuration
 data (read-write) and "ro" state data (read-only).
- Symbols after data node names: "?" means an optional node, "!" means
 a presence container, and "*" denotes a list and leaf-list.
- Parentheses enclose choice and case nodes, and case nodes are also
marked with a colon (":").
- Ellipsis ("...") stands for contents of subtrees that are not shown.

* Objectives

This section describes some of the design objectives for the entity
model.

- There are many common properties used to identify the entities,
  which need to be supported in the entity data module.
- There are many important information and states about the
  entities, which needs to be collected from the devices which
  support the entity data model.
- The entity data model SHOULD be suitable for new implementations
  to use as is.
- The entity data model defined in this document can be implemented
  on a system that also implements ENTITY-MIB, thus the mapping
  between the entity data model and ENTITY-MIB SHOULD be clear.

* Entity Data Model

This document defines the YANG module "ietf-entity", which has the
following structure:

  module: ietf-entity
     +--ro entity-state
     |  +--ro last-change?       yang:date-and-time
     |  +--ro physical-entity* [name]
     |     +--ro name            string
     |     +--ro class?          identityref
     |     +--ro physical-index? int32 {entity-mib}?
     |     +--ro description?    string
     |     +--ro contained-in*   -> ../../physical-entity/name
     |     +--ro contains-child* -> ../../physical-entity/name
     |     +--ro parent-rel-pos? int32
     |     +--ro hardware-rev?   string
     |     +--ro firmware-rev?   string
     |     +--ro software-rev?   string
     |     +--ro serial-num?     string
     |     +--ro mfg-name?       string
     |     +--ro model-name?     string
     |     +--ro alias?          string
     |     +--ro asset-id?       string
     |     +--ro is-fru?         boolean
     |     +--ro mfg-date?       yang:date-and-time
     |     +--ro uri*            inet:uri
     |     +--ro uuid?           yang:uuid
     |     +--ro last-changed?   yang:date-and-time {entity-state}?
     |     +--ro admin-state?    entity-admin-state {entity-state}?
     |     +--ro oper-state?     entity-oper-state {entity-state}?
     |     +--ro usage-state?    entity-usage-state {entity-state}?
     |     +--ro alarm-status?   entity-alarm-status {entity-state}?
     |     +--ro standby-status? entity-standby-status {entity-state}?
     |     +--ro sensor-data {entity-sensor}?
     |        +--ro data-type?              entity-sensor-data-type
     |        +--ro data-scale?             entity-sensor-data-scale
     |        +--ro precision?              entity-sensor-precision
     |        +--ro value?                  entity-sensor-value
     |        +--ro oper-status?            entity-sensor-status
     |        +--ro sensor-units-display?   string
     |        +--ro value-timestamp?        yang:date-and-time
     |        +--ro value-update-rate?      uint32
     +--rw entity {entity-config}?
        +--rw physical-entity* [name]
           +--rw name          string
           +--rw serial-num?   string
           +--rw alias?        string
           +--rw asset-id?     string
           +--rw uri*          inet:uri

  notifications:
     +---n ent-config-change
     +---n ent-state-oper-enabled      {entity-state}?
     |  +--ro name?           -> /entity-state/physical-entity
                                 /name
     |  +--ro admin-state?    -> /entity-state/physical-entity
                                 /admin-state
     |  +--ro alarm-status?   -> /entity-state/physical-entity
                                 /alarm-status
     +---n ent-state-oper-disabled     {entity-state}?
        +--ro name?           -> /entity-state/physical-entity
                                 /name
        +--ro admin-state?    -> /entity-state/physical-entity
                                 /admin-state
        +--ro alarm-status?   -> /entity-state/physical-entity
                                 /alarm-status

** The Physical Entry Lists

The data model for physical entities presented in this document uses a
flat list of entities.  Each entity in the list is identified by its
name.  Furthermore, each entity has a mandatory "class" leaf.

The "iana-entity" module defines YANG identities for the
hardware types in the IANA-maintained "IANA-ENTITY-MIB" registry.

There is one optional list of configured physical entities
("/entity/physical-entity"), and a separate list for the operational
state of all physical entities ("/entity-state/physical-entity").

The "class" leaf is a YANG identity that describes the type of the
hardware.  Vendors are encouraged to either directly use one of the
common IANA-defined identities, or derive a more specific identity
from one of them.

* Relationship to ENTITY-MIB

If the device implements the ENTITY-MIB ^RFC6933^, each entry in the
/entity-state/physical-entity list is mapped to one EntPhysicalEntry.
Objects that are writable in the MIB are mapped to nodes in the
/entity/physical-entity list.

The "physical-index" leaf MUST contain the value of the corresponding
entPhysicalEntry's entPhysicalIndex.

The "class" leaf is mapped to both entPhysicalClass and
entPhysicalVendorType.  If the value of the "class" leaf is an
identity that is either derived from or is one of the identities in the
"iana-entity" module, then entPhysicalClass contains the corresponding
IANAPhysicalClass enumeration value.  Otherwise, entPhysicalClass
contains the IANAPhysicalClass value "other(1)".  Vendors are
encouraged to define an identity (derived from an identity in
"iana-entity" if possible) for each enterprise-specific registration
identifier used for entPhysicalVendorType, and use that identity for
the "class" leaf.

The following tables list the YANG data nodes with corresponding
objects in the ENTITY-MIB.

-- YANG data nodes and related ENTITY-MIB objects
| YANG data node in /entity-state/physical-entity | ENTITY-MIB object                      |
|-------------------------------------------------+----------------------------------------|
| name                                            | entPhysicalName                        |
| class                                           | entPhysicalClass entPhysicalVendorType |
| physical-index                                  | entPhysicalIndex                       |
| description                                     | entPhysicalDescr                       |
| contained-in                                    | entPhysicalContainedIn                 |
| contains-child                                  | entPhysicalChildIndex                  |
| parent-rel-pos                                  | entPhysicalParentRelPos                |
| hardware-rev                                    | entPhysicalHardwareRev                 |
| firmware-rev                                    | entPhysicalFirmwareRev                 |
| software-rev                                    | entPhysicalSoftwareRev                 |
| serial-num                                      | entPhysicalSerialNum                   |
| mfg-name                                        | entPhysicalMfgName                     |
| model-name                                      | entPhysicalModelName                   |
| alias                                           | entPhysicalAlias                       |
| asset-id                                        | entPhysicalAssetID                     |
| is-fru                                          | entPhysicalIsFRU                       |
| mfg-date                                        | entPhysicalMfgDate                     |
| uri                                             | entPhysicalUris                        |
| uuid                                            | entPhysicalUUID                        |

* Relationship to ENTITY-SENSOR-MIB

* Relationship to ENTITY-STATE-MIB

* Entity YANG Module

!! include-figure ietf-entity.yang extract-to="ietf-entity@2015-08-20.yang"

Move this to a separate document:

!! include-figure iana-entity.yang extract-to="iana-entity@2015-08-20.yang"

* IANA Considerations @iana@

This document registers a URI in the IETF XML registry
^RFC3688^. Following the format in RFC 3688, the following
registration is requested to be made.

     URI: TBD

     Registrant Contact: The IESG.

     XML: N/A, the requested URI is an XML namespace.

This document registers a YANG module in the YANG Module Names
registry ^RFC6020^.

  name:         ietf-entity
  namespace:    TBD
  prefix:       ent
  reference:    RFC XXXX

* Security Considerations

TBD

* Acknowledgements

TBD

{{document:
    name ;
    ipr trust200902;
    category std;
    references entity-back.xml;
    title "A YANG Data Model for Entity Managemet";
    abbreviation "YANG Entity Management";
    contributor "author:Andy Bierman:YumaWorks:andy@yumaworks.com";
    contributor "author:Martin Bjorklund:Tail-f Systems:mbj@tail-f.com";
    contributoe "author:Jie Dong:Huawei Technologies:jie.dong@huawei.com";
    contributor "author:Dan Romascanu:Avaya:dromasca@avaya.com";
}}
