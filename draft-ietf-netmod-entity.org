# -*- org -*-

This document defines a YANG data model for the management of hardware
on a single server.

* Introduction

This document defines a YANG ^I-D.ietf-netmod-rfc6020bis^ data model
for the management of hardware on a single server.

The data model includes configuration data and state data (status
information and counters for the collection of statistics).

** Terminology

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14, ^RFC2119^.

*** Tree Diagrams

A simplified graphical representation of the data model is used in
this document.  The meaning of the symbols in these
diagrams is as follows:

- Brackets "[" and "]" enclose list keys.
- Abbreviations before data node names: "rw" means configuration
 data (read-write) and "ro" state data (read-only).
- Symbols after data node names: "?" means an optional node, "!" means
 a presence container, and "*" denotes a list and leaf-list.
- Parentheses enclose choice and case nodes, and case nodes are also
marked with a colon (":").
- Ellipsis ("...") stands for contents of subtrees that are not shown.

* Objectives

This section describes some of the design objectives for the hardware
model.

- There are many common properties used to identify hardware components,
  which need to be supported in the hardware data model.
- There are many important information and states about the
  components, which needs to be collected from the devices which
  support the hardware data model.
- The hardware data model SHOULD be suitable for new implementations
  to use as is.
- The hardware data model defined in this document can be implemented
  on a system that also implements ENTITY-MIB, thus the mapping
  between the hardware data model and ENTITY-MIB SHOULD be clear.

* Hardware Data Model

This document defines the YANG module "ietf-hardware", which has the
following structure:

!! include-figure ietf-hardware.tree

** The Components Lists

The data model for hardware presented in this document uses a
flat list of components.  Each component in the list is identified by its
name.  Furthermore, each component has a mandatory "class" leaf.

The "iana-entity" module defines YANG identities for the
hardware types in the IANA-maintained "IANA-ENTITY-MIB" registry.

The "class" leaf is a YANG identity that describes the type of the
hardware.  Vendors are encouraged to either directly use one of the
common IANA-defined identities, or derive a more specific identity
from one of them.

There is one optional list of configured components
("/hardware/component"), and a separate list for the operational
state of all components ("/hardware-state/component").

* Relationship to ENTITY-MIB

If the device implements the ENTITY-MIB ^RFC6933^, each entry in the
/hardware-state/component list is mapped to one EntPhysicalEntry.
Objects that are writable in the MIB are mapped to nodes in the
/hardware/component list.

The "physical-index" leaf MUST contain the value of the corresponding
entPhysicalEntry's entPhysicalIndex.

The "class" leaf is mapped to both entPhysicalClass and
entPhysicalVendorType.  If the value of the "class" leaf is an
identity that is either derived from or is one of the identities in the
"iana-entity" module, then entPhysicalClass contains the corresponding
IANAPhysicalClass enumeration value.  Otherwise, entPhysicalClass
contains the IANAPhysicalClass value "other(1)".  Vendors are
encouraged to define an identity (derived from an identity in
"iana-entity" if possible) for each enterprise-specific registration
identifier used for entPhysicalVendorType, and use that identity for
the "class" leaf.

The following tables list the YANG data nodes with corresponding
objects in the ENTITY-MIB.

-- YANG data nodes and related ENTITY-MIB objects
| YANG data node in /hardware-state/component | ENTITY-MIB object                      |
|-------------------------------------------------+----------------------------------------|
| name                                            | entPhysicalName                        |
| class                                           | entPhysicalClass entPhysicalVendorType |
| physical-index                                  | entPhysicalIndex                       |
| description                                     | entPhysicalDescr                       |
| contained-in                                    | entPhysicalContainedIn                 |
| contains-child                                  | entPhysicalChildIndex                  |
| parent-rel-pos                                  | entPhysicalParentRelPos                |
| hardware-rev                                    | entPhysicalHardwareRev                 |
| firmware-rev                                    | entPhysicalFirmwareRev                 |
| software-rev                                    | entPhysicalSoftwareRev                 |
| serial-num                                      | entPhysicalSerialNum                   |
| mfg-name                                        | entPhysicalMfgName                     |
| model-name                                      | entPhysicalModelName                   |
| alias                                           | entPhysicalAlias                       |
| asset-id                                        | entPhysicalAssetID                     |
| is-fru                                          | entPhysicalIsFRU                       |
| mfg-date                                        | entPhysicalMfgDate                     |
| uri                                             | entPhysicalUris                        |
| uuid                                            | entPhysicalUUID                        |

* Relationship to ENTITY-SENSOR-MIB

TBD relationship to ^RFC3433^.

* Relationship to ENTITY-STATE-MIB

TBD relationship to ^RFC4268^.

* Hardware YANG Module

!! include-figure ietf-hardware.yang extract-to="ietf-hardware@2016-10-25.yang"

!! include-figure iana-entity.yang extract-to="iana-entity@2016-10-25.yang"

* IANA Considerations @iana@

This document registers a URI in the IETF XML registry
^RFC3688^. Following the format in RFC 3688, the following
registration is requested to be made.

     URI: urn:ietf:params:xml:ns:yang:ietf-hardware

     Registrant Contact: The IESG.

     XML: N/A, the requested URI is an XML namespace.

This document registers a YANG module in the YANG Module Names
registry ^RFC6020^.

  name:         ietf-hardware
  namespace:    urn:ietf:params:xml:ns:yang:ietf-hardware
  prefix:       hw
  reference:    RFC XXXX

* Security Considerations

TBD

* Acknowledgements

TBD

*! start-appendix

* Open Issues

- Should the model support pre-configuration of hardware components?
  The current model supports pre-configuration of components provided
  the operator knows the name of the component to be installed.  A
  more useful model would use the parent component, class, and
  parent-rel-pos as identification.  If the system detects a component
  and there is configuration available for the parent component,
  class, and parent-rel-pos then the system would instatiate the
  component with the provided name, and optionally additional
  parameters.
- Is there a need for a standard action 'reset' that can be used to
  reset components?


{{document:
    name ;
    ipr trust200902;
    category std;
    references back.xml;
    title "A YANG Data Model for Hardware Management";
    abbreviation "YANG Entity Management";
    contributor "author:Andy Bierman:YumaWorks:andy@yumaworks.com";
    contributor "author:Martin Bjorklund:Tail-f Systems:mbj@tail-f.com";
    contributor "author:Jie Dong:Huawei Technologies:jie.dong@huawei.com";
    contributor "author:Dan Romascanu::dromasca@gmail.com";
}}
